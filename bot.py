import logging
import random
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = "8200150971:AAGbqJ2IHsgnhv3cdmvAkWmMfHMWg5NASFI"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù

# –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.WARNING
)

# --- –ñ—É—Ç–∫–∏–µ –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –ø—Ä–æ —Å–º–µ—Ä—Ç—å ---
CHINESE_HORROR_WORDS = [
    "Ê≠ª", "Ê≠ª‰∫°", "È¨º", "ÂπΩÁÅµ", "Âú∞Áã±", "ÊÅ∂È≠î", "ËØÖÂíí", "Â∞∏‰Ωì", "ÂùüÂ¢ì", 
    "Ë°ÄËÖ•", "ÊÅêÊÄñ", "ÈªëÊöó", "ÁÅµÈ≠Ç", "Âô©Ê¢¶", "ÁóõËã¶", "ÊäòÁ£®", "ÊØÅÁÅ≠"
]

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
PLAYING = 1
user_sessions = {}

# --- –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –í–û–ü–†–û–°–´ ---
special_questions = [
    {
        'question': '–í —Ç–≤–æ–µ–º –∑–¥–∞–Ω–∏–∏ –ø–æ—Ç—É—Ö —Å–≤–µ—Ç –∫—Ç–æ —Ç–∞–º?',
        'answers': ['–ù–µ –∑–Ω–∞—é', '–ü—Ä–∏–∑—Ä–∞–∫', '–¢—ã'],
        'follow_up': None
    },
    {
        'question': '–°—Ç–∞–≤ –ø—Ä–∏–∑—Ä–∞–∫–æ–º, –∫–æ–º—É —Ç—ã —É—Å—Ç—Ä–æ–∏—à—å —É–∂–∞—Å?',
        'answers': ['–†–æ–¥–Ω—ã–º –∏ –±–ª–∏–∑–∫–∏–º', '–¥—Ä—É–∑—å—è–º –∏ –ø–æ–¥—Ä—É–≥–∞–º'],
        'follow_up': None
    },
    {
        'question': '–í –≤–∞–Ω–Ω–æ–π, –µ—Å—Ç—å –∑–µ—Ä–∫–∞–ª–æ, –∞ –≤ –Ω–µ–º –ø–æ—è–≤–∏–ª–æ—Å—å –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∏—à—å?',
        'answers': ['–ù–µ—Ç', '–ù–µ —Ö–æ—á—É', '–î–∞'],
        'follow_up': None
    },
    {
        'question': '–Ø –≤–∏–∂—É —Ç–≤–æ–π –∏—Å–ø—É–≥... –∫–∞–∫ –¥—É–º–∞–µ—à—å —è –∑–Ω–∞—é –≥–¥–µ —Ç—ã?)',
        'answers': ['–Ω–µ—Ç –∫–æ–Ω–µ—á–Ω–æ', '—è –±–æ—é—Å—å —Ç–µ–±—è'],
        'follow_up': None
    },
    {
        'question': '–ó–ê–ß–ï–ú –¢–´ –ü–û–î–°–ú–ê–¢–†–ò–í–ê–õ –ó–ê –ß–ï–õ–û–í–ï–ö–û–ú?!',
        'answers': ['–≠—Ç–æ –ª–æ–∂—å', '–æ—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å'],
        'follow_up': {
            'question': '–§—É, —Ç–µ–±–µ –Ω–µ –º–µ—Ä–∑–∫–æ? —è –∂–µ –≤—Å–µ –∑–Ω–∞—é!',
            'answers': ['—Ç—ã –≥–æ–≤–æ—Ä–∏—à—å –ª–æ–∂—å', '–ª–∞–¥–Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞']
        }
    }
]

def load_questions(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            questions = [line.strip() for line in f if line.strip()]
        return questions
    except FileNotFoundError:
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
normal_questions_level1 = load_questions('questions_normal_level1.txt')
normal_questions_level2 = load_questions('questions_normal_level2.txt') 
normal_questions_level3 = load_questions('questions_normal_level3.txt')
penalty_questions = load_questions('questions_penalty.txt')

def get_current_level_questions(total_questions):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if total_questions < 20:
        return normal_questions_level1, "üåô"
    elif total_questions < 45:
        return normal_questions_level2, "üëª"
    else:
        return normal_questions_level3, "üíÄ"

def get_user_session(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'lives': 3,
            'consecutive_answers': {'–¥–∞': 0, '–Ω–µ—Ç': 0},
            'used_normal_questions': set(),
            'used_penalty_questions': set(),
            'used_special_questions': set(),
            'in_penalty': False,
            'penalty_questions_asked': 0,
            'total_questions_asked': 0,
            'current_special_question': None,
            'waiting_for_follow_up': False,
            'last_level': 1
        }
    return user_sessions[user_id]

def generate_chinese_horror_text():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∂—É—Ç–∫–∏–π –∫–∏—Ç–∞–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç"""
    return ''.join(random.choices(CHINESE_HORROR_WORDS, k=random.randint(3, 8)))

async def send_chinese_transition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è"""
    horror_text = generate_chinese_horror_text()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üîÄ {horror_text}"
    )
    await asyncio.sleep(1)

async def start_chinese_spam(update: Update, context: ContextTypes.DEFAULT_TYPE, duration: int = 30):
    """–°–ø–∞–º–∏—Ç –∂—É—Ç–∫–∏–º–∏ –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    chat_id = update.effective_chat.id
    end_time = asyncio.get_event_loop().time() + duration
    
    try:
        while asyncio.get_event_loop().time() < end_time:
            horror_text = generate_chinese_horror_text()
            await context.bot.send_message(chat_id=chat_id, text=horror_text)
            await asyncio.sleep(random.uniform(0.1, 0.3))
            
    except Exception:
        pass
    
    await context.bot.send_message(
        chat_id=chat_id,
        text="üíÄ –°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê...\n\n/start - –µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—à—å—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )

async def ask_special_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    user_id = update.message.from_user.id
    session = get_user_session(user_id)
    
    available_special = set(range(len(special_questions))) - session['used_special_questions']
    
    if not available_special:
        return await ask_question(update, context)
    
    question_index = random.choice(list(available_special))
    session['used_special_questions'].add(question_index)
    special_q = special_questions[question_index]
    
    session['current_special_question'] = special_q
    session['waiting_for_follow_up'] = False
    
    keyboard = [[answer] for answer in special_q['answers']]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üé≠ {special_q['question']}",
        reply_markup=markup
    )

async def handle_special_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
    user_id = update.message.from_user.id
    session = get_user_session(user_id)
    user_answer = update.message.text.strip()
    
    if not session['current_special_question']:
        return await handle_answer(update, context)
    
    current_q = session['current_special_question']
    
    if session['waiting_for_follow_up'] and current_q['follow_up']:
        follow_up_q = current_q['follow_up']
        
        follow_up_reactions = {
            '—Ç—ã –≥–æ–≤–æ—Ä–∏—à—å –ª–æ–∂—å': [
                "–Ø –í–°–ï–ì–î–ê –ü–†–ê–í! –¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±–º–∞–Ω—É—Ç—å —Å–µ–±—è...",
                "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ - –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –±–µ–∑—É–º–∏—é..."
            ],
            '–ª–∞–¥–Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞': [
                "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ... –∫–∞–∫–æ–π —Å–º–µ–ª—ã–π —à–∞–≥...",
                "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø—Ä–∞–≤–¥–∞... –Ω–æ —Ç–µ–ø–µ—Ä—å —è –∑–Ω–∞—é —Ç–≤–æ—é —Ç–∞–π–Ω—É..."
            ]
        }
        
        if user_answer in follow_up_reactions:
            reaction = random.choice(follow_up_reactions[user_answer])
            await update.message.reply_text(reaction)
        
        session['waiting_for_follow_up'] = False
        session['current_special_question'] = None
        
    else:
        reactions = {
            '–ù–µ –∑–Ω–∞—é': "–ù–µ–∑–Ω–∞–Ω–∏–µ –Ω–µ —Å–ø–∞—Å–µ—Ç —Ç–µ–±—è –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–∏–¥–µ—Ç...",
            '–ü—Ä–∏–∑—Ä–∞–∫': "–ü—Ä–∏–∑—Ä–∞–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç... –∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —Å–µ–π—á–∞—Å –∑–∞ —Ç–≤–æ–µ–π —Å–ø–∏–Ω–æ–π...",
            '–¢—ã': "–ü—Ä–∞–≤–∏–ª—å–Ω–æ... —è —É–∂–µ –≤ —Ç–≤–æ–µ–º –¥–æ–º–µ...",
            '–†–æ–¥–Ω—ã–º –∏ –±–ª–∏–∑–∫–∏–º': "–ö–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ... –∫—Ä–æ–≤–Ω—ã–µ —É–∑—ã –≤—Å–µ–≥–¥–∞ —Ä–≤—É—Ç—Å—è –ø–µ—Ä–≤—ã–º–∏...",
            '–¥—Ä—É–∑—å—è–º –∏ –ø–æ–¥—Ä—É–≥–∞–º': "–î—Ä—É–∂–±–∞... —Ç–∞–∫–æ–µ —Ö—Ä—É–ø–∫–æ–µ –ø–æ–Ω—è—Ç–∏–µ... –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è...",
            '–ù–µ—Ç': "–ú—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ... –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –ª—É—á—à–µ –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å...",
            '–ù–µ —Ö–æ—á—É': "–°—Ç—Ä–∞—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–µ–±–µ –∂–∏–∑–Ω—å... –Ω–∞ –≤—Ä–µ–º—è...",
            '–î–∞': "–°–º–µ–ª—å—á–∞–∫... –Ω–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–æ, —á—Ç–æ —Ç—ã —É–≤–∏–¥–∏—à—å...",
            '–Ω–µ—Ç –∫–æ–Ω–µ—á–Ω–æ': "–û—à–∏–±–∞–µ—à—å—Å—è... —è –≤–∏–∂—É –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ...",
            '—è –±–æ—é—Å—å —Ç–µ–±—è': "–°—Ç—Ä–∞—Ö - —ç—Ç–æ —Ä–∞–∑—É–º–Ω–æ... –æ–Ω –ø—Ä–æ–¥–ª–∏—Ç —Ç–≤–æ—é –∞–≥–æ–Ω–∏—é...",
            '–≠—Ç–æ –ª–æ–∂—å': "–õ–æ–∂—å? –Ø –≤–∏–¥–µ–ª —Ç–µ–±—è... –≤ —Ç–æ—Ç –≤–µ—á–µ—Ä... —É –æ–∫–Ω–∞...",
            '–æ—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å': "–Ø –∑–Ω–∞—é –≤—Å–µ... –∫–∞–∂–¥—É—é —Ç–≤–æ—é –º—ã—Å–ª—å... –∫–∞–∂–¥—ã–π –≥—Ä–µ—Ö..."
        }
        
        if user_answer in reactions:
            await update.message.reply_text(reactions[user_answer])
        
        if current_q['follow_up'] and not session['waiting_for_follow_up']:
            session['waiting_for_follow_up'] = True
            follow_up_q = current_q['follow_up']
            
            keyboard = [[answer] for answer in follow_up_q['answers']]
            markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üé≠ {follow_up_q['question']}",
                reply_markup=markup
            )
            return PLAYING
    
    session['current_special_question'] = None
    await ask_question(update, context)
    return PLAYING

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
    user = update.message.from_user
    user_id = user.id
    session = get_user_session(user_id)

    # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    session.update({
        'lives': 3,
        'consecutive_answers': {'–¥–∞': 0, '–Ω–µ—Ç': 0},
        'used_normal_questions': set(),
        'used_penalty_questions': set(),
        'used_special_questions': set(),
        'in_penalty': False,
        'penalty_questions_asked': 0,
        'total_questions_asked': 0,
        'current_special_question': None,
        'waiting_for_follow_up': False,
        'last_level': 1
    })

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}... –Ø –ê–î–∫–∏–Ω–∞—Ç–æ—Ä.\n"
        "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ø–æ–∫–æ–π–Ω–æ... –Ω–æ —Å –∫–∞–∂–¥—ã–º –≤–æ–ø—Ä–æ—Å–æ–º\n"
        "—Ç—å–º–∞ –±—É–¥–µ—Ç —Å–≥—É—â–∞—Ç—å—Å—è... –≥–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é?\n\n"
        "*–£—Ä–æ–≤–Ω–∏ —É–∂–∞—Å–∞:*\n"
        "üåô 1-20: –õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üëª 21-45: –°—Ç—Ä–∞—à–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã  \n"
        "üíÄ 46-70: –ö–æ—à–º–∞—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–ù–∞—á–Ω–µ–º —Å –º–∞–ª–æ–≥–æ..."
    )
    
    markup = ReplyKeyboardMarkup([["–î–ê", "–ù–ï–¢"]], one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=markup, parse_mode='Markdown')
    
    await ask_question(update, context)
    return PLAYING

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π"""
    user_id = update.message.from_user.id
    session = get_user_session(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if session['total_questions_asked'] >= 70:
        await update.message.reply_text("*–¢—ã –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞... –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ...*", parse_mode='Markdown')
        await start_chinese_spam(update, context, duration=20)
        return await end_game(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    current_questions, level_icon = get_current_level_questions(session['total_questions_asked'])
    current_level = 1 if session['total_questions_asked'] < 20 else 2 if session['total_questions_asked'] < 45 else 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —É—Ä–æ–≤–Ω—è
    if current_level != session['last_level']:
        await send_chinese_transition(update, context)
        level_messages = {
            2: "üåë –¢—å–º–∞ —Å–≥—É—â–∞–µ—Ç—Å—è... –≤–æ–ø—Ä–æ—Å—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç—Ä–∞—à–Ω–µ–µ...",
            3: "üíÄ –ü–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –∫–æ—à–º–∞—Ä... –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥..."
        }
        if current_level in level_messages:
            await update.message.reply_text(level_messages[current_level])
        session['last_level'] = current_level
    
    # 15% —à–∞–Ω—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ —Å —É—Ä–æ–≤–Ω—è 2)
    if current_level >= 2 and random.random() < 0.15 and len(session['used_special_questions']) < len(special_questions):
        return await ask_special_question(update, context)
    
    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if session['in_penalty']:
        available_questions = set(range(len(penalty_questions))) - session['used_penalty_questions']
        if not available_questions:
            session['in_penalty'] = False
            session['penalty_questions_asked'] = 0
            return await ask_question(update, context)
        
        question_index = random.choice(list(available_questions))
        session['used_penalty_questions'].add(question_index)
        question = penalty_questions[question_index]
        
    else:
        available_questions = set(range(len(current_questions))) - session['used_normal_questions']
        if not available_questions:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            session['used_normal_questions'] = set()
            return await ask_question(update, context)
        
        question_index = random.choice(list(available_questions))
        session['used_normal_questions'].add(question_index)
        question = current_questions[question_index]
    
    session['total_questions_asked'] += 1
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–ê/–ù–ï–¢
    markup = ReplyKeyboardMarkup([["–î–ê", "–ù–ï–¢"]], one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(
        f"{level_icon} *–í–æ–ø—Ä–æ—Å {session['total_questions_asked']}/70:*\n{question}", 
        reply_markup=markup, 
        parse_mode='Markdown'
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –î–ê/–ù–ï–¢"""
    user_id = update.message.from_user.id
    session = get_user_session(user_id)
    user_answer = update.message.text.strip().lower()

    if session['current_special_question'] or session['waiting_for_follow_up']:
        return await handle_special_answer(update, context)

    if user_answer not in ['–¥–∞', '–Ω–µ—Ç']:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –î–ê –∏–ª–∏ –ù–ï–¢. –í—ã–±–æ—Ä–∞ –Ω–µ—Ç.")
        return PLAYING

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –î–ê/–ù–ï–¢
    session['consecutive_answers'][user_answer] += 1
    opposite_answer = '–Ω–µ—Ç' if user_answer == '–¥–∞' else '–¥–∞'
    session['consecutive_answers'][opposite_answer] = 0

    if session['consecutive_answers'][user_answer] >= 3:
        session['lives'] -= 1
        session['consecutive_answers'][user_answer] = 0

        if session['lives'] <= 0:
            await update.message.reply_text("Game Over - —Ç—å–º–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç —Ç–µ–±—è...")
            await start_chinese_spam(update, context, duration=30)
            return await end_game(update, context)
        else:
            await update.message.reply_text(
                f"*–°–ª–∏—à–∫–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ...* –ñ–∏–∑–Ω—å –ø–æ—Ç–µ—Ä—è–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å: {session['lives']}",
                parse_mode='Markdown'
            )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ª–æ–∂—å"
    is_lying = random.random() < 0.25
    if is_lying and not session['in_penalty']:
        session['in_penalty'] = True
        await update.message.reply_text("–¢—ã —Å–æ–ª–≥–∞–ª... *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à—Ç—Ä–∞—Ñ–Ω—É—é –∏–≥—Ä—É!*", parse_mode='Markdown')
    
    await ask_question(update, context)
    return PLAYING

async def end_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
    user_id = update.message.from_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏–≥—Ä—É"""
    user = update.message.from_user
    await update.message.reply_text("–¢—ã —Å–±–µ–∂–∞–ª... –Ω–æ —Ç—å–º–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ç–æ–±–æ–π...")
    await start_chinese_spam(update, context, duration=15)
    
    user_id = user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
        
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PLAYING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    
    print("üé≠ –ê–î–∫–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É—é—â–∏–º —É–∂–∞—Å–æ–º!")
    print("üåô ‚Üí üëª ‚Üí üíÄ –í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å—Ç—Ä–∞—à–Ω–µ–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()